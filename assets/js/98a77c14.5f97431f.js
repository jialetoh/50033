"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[9019],{5162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),r=n(6010);const o={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.default)(o.tabItem,s),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>y});var a=n(7462),r=n(7294),o=n(6010),s=n(2466),i=n(6550),l=n(1980),c=n(7392),u=n(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=p(e),[s,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[l,c]=m({queryString:n,groupId:a}),[d,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),g=(()=>{const e=l??d;return h({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{g&&i(g)}),[g]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),b(e)}),[c,b,o]),tabValues:o}}var g=n(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:n,selectedValue:i,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),p=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==i&&(d(t),l(a))},h=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.default)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:h,onClick:p},s,{className:(0,o.default)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":i===t})}),n??t)})))}function w(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=b(e);return r.createElement("div",{className:(0,o.default)("tabs-container",f.tabList)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(w,(0,a.Z)({},e,t)))}function y(e){const t=(0,g.Z)();return r.createElement(k,(0,a.Z)({key:String(t)},e))}},6729:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var a=n(7462),r=(n(7294),n(3905)),o=(n(1694),n(6596),n(6533)),s=(n(505),n(1496));n(4866),n(5162);const i={sidebar_position:1},l="The Singleton Pattern",c={unversionedId:"children/singletons",id:"children/singletons",title:"The Singleton Pattern",description:"When we switch from one game scene to another, we will destroy all GameObjects (along with its components) in the previous scene. Sometimes we want some GameObjects to persist, or more specifically",source:"@site/docs/04-children/singletons.md",sourceDirName:"04-children",slug:"/children/singletons",permalink:"/50033/docs/children/singletons",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Unity for Children",permalink:"/50033/docs/category/unity-for-children"}},u={},d=[{value:"C#: Static Variable",id:"c-static-variable",level:3},{value:"C#: Properties",id:"c-properties",level:3}],p={toc:d},h="wrapper";function m(e){let{components:t,...i}=e;return(0,r.kt)(h,(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-singleton-pattern"},"The Singleton Pattern"),(0,r.kt)("p",null,"When we switch from one game scene to another, we will ",(0,r.kt)("span",{className:"orange-bold"},"destroy")," all GameObjects (along with its components) in the previous scene. Sometimes we want some GameObjects to persist, or more specifically: its data or state. We can create a script that implement the Singleton pattern so that the GameObject (along with its children) is ",(0,r.kt)("strong",{parentName:"p"},"not")," destroyed upon loading to a new Scene. Note that this will only apply on ",(0,r.kt)("span",{className:"orange-bold"},"root")," GameObject. Before we begin, create a new scene and name it ",(0,r.kt)("inlineCode",{parentName:"p"},"World 1-2"),". You don't have to follow exactly ",(0,r.kt)("a",{parentName:"p",href:"https://nesmaps.com/maps/SuperMarioBrothers/SuperMarioBrosWorld1-2Map.html"},"how World 1-2 looks"),", but here's a sample:"),(0,r.kt)(o.Z,{path:n(493).Z,widthPercentage:"100%",mdxType:"ImageCard"}),(0,r.kt)("p",null,"To allow Unity to know which Scenes are involved for run test and build, we need to add them to the Build Setting. Go to File >> Build Setting and add Scenes (drag it to this Build Setting window) that are relevant to your game:"),(0,r.kt)(s.Z,{path:"https://50033.s3.ap-southeast-1.amazonaws.com/week-3/build-setting.mp4",widthPercentage:"100%",mdxType:"VideoItem"}),(0,r.kt)("admonition",{title:"The Singleton Pattern",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The singleton pattern is a way to ensure a class has only a single globally accessible instance available at ALL times. Behaving much like a regular static class but with some advantages. This is very useful for making global manager type classes that hold global variables and functions that many other classes need to access.")),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"Awake()")," function of any script, you can add the following instructions to make it a Singleton:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"// Property\nprivate  static  GameObject _instance;\n\n// Getter\npublic  static  GameObject instance\n{\n    get { return  _instance; }\n}\n\nprivate  void  Awake()\n{\n    // check if the _instance is not this, means it's been set before, return\n    if (_instance  !=  null  &&  _instance  !=  this)\n    {\n        Destroy(this.gameObject);\n        return;\n    }\n\n    // otherwise, this is the first time this instance is created\n    _instance  =  this;\n    // add to preserve this object open scene loading\n    DontDestroyOnLoad(this.gameObject); // only works on root gameObjects\n}\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Note that if ",(0,r.kt)("inlineCode",{parentName:"p"},"this.gameObject")," is NOT root level GameObject, it will not work. The editor will warn you: ",(0,r.kt)("inlineCode",{parentName:"p"},"DontDestroyOnLoad")," only work for root GameObjects or components on root GameObjects.")),(0,r.kt)("p",null,"Adding the above ",(0,r.kt)("em",{parentName:"p"},"static property")," and Singleton pattern will turn any gameObject to be persistent between screen changing."),(0,r.kt)("h3",{id:"c-static-variable"},"C#: Static Variable"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"static")," keyword allows us to gain access to the instance via the ",(0,r.kt)("strong",{parentName:"p"},"Class")," name, and there will only be one instance that can be linked to this variable Instance at any given time."),(0,r.kt)("h3",{id:"c-properties"},"C#: Properties"),(0,r.kt)("p",null,"Properties allow access control to a class variable. Writing C# getter and setter properties are very simple, here's a quick example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"//Member variables can be referred to as fields.\nprivate  int _healthPoints;\n\n//healthPoints is a basic property\npublic  int healthPoints {\n    get {\n        //Some other code\n        // ...\n        return _healthPoints;\n    }\n    set {\n        // Some other code, check etc\n        // ...\n        _healthPoints = value; // value is the amount passed by the setter\n    }\n}\n\n// usage\nDebug.Log(player.healthPoints); // this will call instructions under get{}\nplayer.healthPoints += 20; // this will call instructions under set{}, where value is 20\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Optionally, you can have private set instead of just set to disallow other classes from setting it.")))}m.isMDXComponent=!0},493:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/2023-08-20-17-37-39-ce6a91a608f4fb18726c6e499afd9801.png"}}]);